#!/usr/bin/env python3
"""
Focused tests for core vibe functionality to enable faster mutation testing.
"""

import os
import shutil
import subprocess
import tempfile
import time
from pathlib import Path
from unittest.mock import patch

import pytest

# Import the main module and access function objects directly
import main
from main import find_git_repo, run_git_command, session

# Get the original function references from the FunctionTool objects
vibe_status = main.vibe_status.fn


class GitRepoFixture:
    """Helper class to create and manage temporary git repositories for testing."""

    def __init__(self):
        self.temp_dir = None
        self.repo_path = None
        self.original_cwd = None

    def __enter__(self):
        """Create a temporary git repository."""
        self.temp_dir = tempfile.mkdtemp(prefix="vibe_git_test_")
        self.repo_path = Path(self.temp_dir)
        self.original_cwd = os.getcwd()

        # Change to temp directory
        os.chdir(self.repo_path)

        # Initialize git repo
        subprocess.run(["git", "init"], check=True, capture_output=True)
        subprocess.run(["git", "config", "user.name", "Test User"], check=True)
        subprocess.run(["git", "config", "user.email", "test@example.com"], check=True)

        # Create initial commit
        (self.repo_path / "README.md").write_text("# Test Repo")
        subprocess.run(["git", "add", "README.md"], check=True)
        subprocess.run(["git", "commit", "-m", "Initial commit"], check=True)

        # Ensure we're on main branch (in case git init created a different default)
        result = subprocess.run(
            ["git", "branch", "--show-current"], capture_output=True, text=True
        )
        current_branch = result.stdout.strip() if result.returncode == 0 else "master"

        if current_branch != "main":
            # Rename to main if not already main
            subprocess.run(["git", "branch", "-M", "main"], check=True)

        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Clean up temporary repository."""
        # Reset session state
        session.is_vibing = False
        session.branch_name = None
        if session.observer:
            session.observer.stop()
        session.observer = None
        session.commit_event = None

        # Change back to original directory safely
        if self.original_cwd and os.path.exists(self.original_cwd):
            os.chdir(self.original_cwd)
        else:
            # Fallback to a safe directory
            os.chdir(os.path.expanduser("~"))

        # Remove temp directory
        if self.temp_dir and os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir, ignore_errors=True)


@pytest.fixture(autouse=True)
def reset_session():
    """Reset the global session state before each test."""
    session.is_vibing = False
    session.branch_name = None
    if session.observer:
        session.observer.stop()
    session.observer = None
    session.commit_event = None


class TestVibeStatusCore:
    """Test core vibe_status functionality."""

    def test_status_idle_on_main(self):
        """Test status shows idle when on main branch."""
        with GitRepoFixture():
            result = vibe_status()
            assert "ðŸ”µ IDLE" in result
            assert "Ready to start vibing" in result

    def test_status_detects_vibe_branch(self):
        """Test status detects when on vibe branch but not vibing."""
        with GitRepoFixture():
            # Create and checkout a vibe branch manually
            subprocess.run(["git", "checkout", "-b", "vibe-12345"], check=True)

            result = vibe_status()
            assert "ðŸŸ¡ VIBE BRANCH DETECTED" in result
            assert "vibe-12345" in result

    def test_status_shows_active_session(self):
        """Test status shows active when vibing."""
        with GitRepoFixture():
            # Manually set session state as vibing
            session.is_vibing = True
            session.branch_name = "vibe-test"
            
            # Create the branch
            subprocess.run(["git", "checkout", "-b", "vibe-test"], check=True)

            # Check status
            result = vibe_status()
            assert "ðŸŸ¢ VIBING" in result
            assert "auto-committing changes" in result


# Utility function tests removed for now - focus on status logic


if __name__ == "__main__":
    pytest.main([__file__, "-v"])